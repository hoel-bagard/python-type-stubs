"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from typing import Any, Dict, Optional, Tuple, Type, Union

__all__ = ["to_dict", "from_dict", "save", "load"]
SERIALIZABLE_REGISTRY: Dict[str, SerializableMeta] = ...
NON_SERIALIZABLE_REGISTRY: Dict[str, SerializableMeta] = ...
def shorten_class_name(class_fullname: str) -> str:
    ...

def get_shortest_class_fullname(cls: Type) -> str:
    ...

class SerializableMeta(ABCMeta):
    """
    A metaclass that is used to register classes in `SERIALIZABLE_REGISTRY` or `NON_SERIALIZABLE_REGISTRY`
    so they can be found later while deserializing transformation pipeline using classes full names.
    """
    def __new__(mcs, name: str, bases: Tuple[type, ...], *args, **kwargs) -> SerializableMeta:
        ...
    
    @classmethod
    def is_serializable(mcs) -> bool:
        ...
    
    @classmethod
    def get_class_fullname(mcs) -> str:
        ...
    


class Serializable(metaclass=SerializableMeta):
    @classmethod
    @abstractmethod
    def is_serializable(cls) -> bool:
        ...
    
    @classmethod
    @abstractmethod
    def get_class_fullname(cls) -> str:
        ...
    
    def to_dict(self, on_not_implemented_error: str = ...) -> Dict[str, Any]:
        """
        Take a transform pipeline and convert it to a serializable representation that uses only standard
        python data types: dictionaries, lists, strings, integers, and floats.

        Args:
            self: A transform that should be serialized. If the transform doesn't implement the `to_dict`
                method and `on_not_implemented_error` equals to 'raise' then `NotImplementedError` is raised.
                If `on_not_implemented_error` equals to 'warn' then `NotImplementedError` will be ignored
                but no transform parameters will be serialized.
            on_not_implemented_error (str): `raise` or `warn`.
        """
        ...
    


def to_dict(transform: Serializable, on_not_implemented_error: str = ...) -> Dict[str, Any]:
    """
    Take a transform pipeline and convert it to a serializable representation that uses only standard
    python data types: dictionaries, lists, strings, integers, and floats.

    Args:
        transform: A transform that should be serialized. If the transform doesn't implement the `to_dict`
            method and `on_not_implemented_error` equals to 'raise' then `NotImplementedError` is raised.
            If `on_not_implemented_error` equals to 'warn' then `NotImplementedError` will be ignored
            but no transform parameters will be serialized.
        on_not_implemented_error (str): `raise` or `warn`.
    """
    ...

def instantiate_nonserializable(transform: Dict[str, Any], nonserializable: Optional[Dict[str, Any]] = ...) -> Optional[Serializable]:
    ...

def from_dict(transform_dict: Dict[str, Any], nonserializable: Optional[Dict[str, Any]] = ..., lambda_transforms: Union[Optional[Dict[str, Any]], str] = ...) -> Optional[Serializable]:
    """
    Args:
        transform_dict (dict): A dictionary with serialized transform pipeline.
        nonserializable (dict): A dictionary that contains non-serializable transforms.
            This dictionary is required when you are restoring a pipeline that contains non-serializable transforms.
            Keys in that dictionary should be named same as `name` arguments in respective transforms from
            a serialized pipeline.
        lambda_transforms (dict): Deprecated. Use 'nonserizalizable' instead.
    """
    ...

def check_data_format(data_format: str) -> None:
    ...

def save(transform: Serializable, filepath: str, data_format: str = ..., on_not_implemented_error: str = ...) -> None:
    """
    Take a transform pipeline, serialize it and save a serialized version to a file
    using either json or yaml format.

    Args:
        transform (obj): Transform to serialize.
        filepath (str): Filepath to write to.
        data_format (str): Serialization format. Should be either `json` or 'yaml'.
        on_not_implemented_error (str): Parameter that describes what to do if a transform doesn't implement
            the `to_dict` method. If 'raise' then `NotImplementedError` is raised, if `warn` then the exception will be
            ignored and no transform arguments will be saved.
    """
    ...

def load(filepath: str, data_format: str = ..., nonserializable: Optional[Dict[str, Any]] = ..., lambda_transforms: Union[Optional[Dict[str, Any]], str] = ...) -> object:
    """
    Load a serialized pipeline from a json or yaml file and construct a transform pipeline.

    Args:
        filepath (str): Filepath to read from.
        data_format (str): Serialization format. Should be either `json` or 'yaml'.
        nonserializable (dict): A dictionary that contains non-serializable transforms.
            This dictionary is required when you are restoring a pipeline that contains non-serializable transforms.
            Keys in that dictionary should be named same as `name` arguments in respective transforms from
            a serialized pipeline.
        lambda_transforms (dict): Deprecated. Use 'nonserizalizable' instead.
    """
    ...

def register_additional_transforms() -> None:
    """
    Register transforms that are not imported directly into the `albumentations` module.
    """
    ...

