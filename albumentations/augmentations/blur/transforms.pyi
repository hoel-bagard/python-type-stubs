"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Any, Dict, List, Tuple
from albumentations.core.transforms_interface import ImageOnlyTransform, ScaleFloatType, ScaleIntType

__all__ = ["Blur", "MotionBlur", "GaussianBlur", "GlassBlur", "AdvancedBlur", "MedianBlur", "Defocus", "ZoomBlur"]
class Blur(ImageOnlyTransform):
    """Blur the input image using a random-sized kernel.

    Args:
        blur_limit (int, (int, int)): maximum kernel size for blurring the input image.
            Should be in range [3, inf). Default: (3, 7).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        uint8, float32
    """
    def __init__(self, blur_limit: ScaleIntType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, ksize: int = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, Any]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, ...]:
        ...
    


class MotionBlur(Blur):
    """Apply motion blur to the input image using a random-sized kernel.

    Args:
        blur_limit (int): maximum kernel size for blurring the input image.
            Should be in range [3, inf). Default: (3, 7).
        allow_shifted (bool): if set to true creates non shifted kernels only,
            otherwise creates randomly shifted kernels. Default: True.
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        uint8, float32
    """
    def __init__(self, blur_limit: ScaleIntType = ..., allow_shifted: bool = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, ...]:
        ...
    
    def apply(self, img: np.ndarray, kernel: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, Any]:
        ...
    


class MedianBlur(Blur):
    """Blur the input image using a median filter with a random aperture linear size.

    Args:
        blur_limit (int): maximum aperture linear size for blurring the input image.
            Must be odd and in range [3, inf). Default: (3, 7).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        uint8, float32
    """
    def __init__(self, blur_limit: ScaleIntType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, ksize: int = ..., **params) -> np.ndarray:
        ...
    


class GaussianBlur(ImageOnlyTransform):
    """Blur the input image using a Gaussian filter with a random kernel size.

    Args:
        blur_limit (int, (int, int)): maximum Gaussian kernel size for blurring the input image.
            Must be zero or odd and in range [0, inf). If set to 0 it will be computed from sigma
            as `round(sigma * (3 if img.dtype == np.uint8 else 4) * 2 + 1) + 1`.
            If set single value `blur_limit` will be in range (0, blur_limit).
            Default: (3, 7).
        sigma_limit (float, (float, float)): Gaussian kernel standard deviation. Must be in range [0, inf).
            If set single value `sigma_limit` will be in range (0, sigma_limit).
            If set to 0 sigma will be computed as `sigma = 0.3*((ksize-1)*0.5 - 1) + 0.8`. Default: 0.
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        uint8, float32
    """
    def __init__(self, blur_limit: ScaleIntType = ..., sigma_limit: ScaleFloatType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, ksize: int = ..., sigma: float = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, float]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, str]:
        ...
    


class GlassBlur(Blur):
    """Apply glass noise to the input image.

    Args:
        sigma (float): standard deviation for Gaussian kernel.
        max_delta (int): max distance between pixels which are swapped.
        iterations (int): number of repeats.
            Should be in range [1, inf). Default: (2).
        mode (str): mode of computation: fast or exact. Default: "fast".
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        uint8, float32

    Reference:
    |  https://arxiv.org/abs/1903.12261
    |  https://github.com/hendrycks/robustness/blob/master/ImageNet-C/create_c/make_imagenet_c.py
    """
    def __init__(self, sigma: float = ..., max_delta: int = ..., iterations: int = ..., always_apply: bool = ..., mode: str = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, dxy: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def get_params_dependent_on_targets(self, params: Dict[str, Any]) -> Dict[str, np.ndarray]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, str, str]:
        ...
    
    @property
    def targets_as_params(self) -> List[str]:
        ...
    


class AdvancedBlur(ImageOnlyTransform):
    """Blur the input image using a Generalized Normal filter with a randomly selected parameters.
        This transform also adds multiplicative noise to generated kernel before convolution.

    Args:
        blur_limit: maximum Gaussian kernel size for blurring the input image.
            Must be zero or odd and in range [0, inf). If set to 0 it will be computed from sigma
            as `round(sigma * (3 if img.dtype == np.uint8 else 4) * 2 + 1) + 1`.
            If set single value `blur_limit` will be in range (0, blur_limit).
            Default: (3, 7).
        sigmaX_limit: Gaussian kernel standard deviation. Must be in range [0, inf).
            If set single value `sigmaX_limit` will be in range (0, sigma_limit).
            If set to 0 sigma will be computed as `sigma = 0.3*((ksize-1)*0.5 - 1) + 0.8`. Default: 0.
        sigmaY_limit: Same as `sigmaY_limit` for another dimension.
        rotate_limit: Range from which a random angle used to rotate Gaussian kernel is picked.
            If limit is a single int an angle is picked from (-rotate_limit, rotate_limit). Default: (-90, 90).
        beta_limit: Distribution shape parameter, 1 is the normal distribution. Values below 1.0 make distribution
            tails heavier than normal, values above 1.0 make it lighter than normal. Default: (0.5, 8.0).
        noise_limit: Multiplicative factor that control strength of kernel noise. Must be positive and preferably
            centered around 1.0. If set single value `noise_limit` will be in range (0, noise_limit).
            Default: (0.75, 1.25).
        p (float): probability of applying the transform. Default: 0.5.

    Reference:
        https://arxiv.org/abs/2107.10833

    Targets:
        image
    Image types:
        uint8, float32
    """
    def __init__(self, blur_limit: ScaleIntType = ..., sigmaX_limit: ScaleFloatType = ..., sigmaY_limit: ScaleFloatType = ..., rotate_limit: ScaleIntType = ..., beta_limit: ScaleFloatType = ..., noise_limit: ScaleFloatType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, kernel: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, np.ndarray]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, str, str, str, str, str]:
        ...
    


class Defocus(ImageOnlyTransform):
    """
    Apply defocus transform. See https://arxiv.org/abs/1903.12261.

    Args:
        radius ((int, int) or int): range for radius of defocusing.
            If limit is a single int, the range will be [1, limit]. Default: (3, 10).
        alias_blur ((float, float) or float): range for alias_blur of defocusing (sigma of gaussian blur).
            If limit is a single float, the range will be (0, limit). Default: (0.1, 0.5).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        Any
    """
    def __init__(self, radius: ScaleIntType = ..., alias_blur: ScaleFloatType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, radius: int = ..., alias_blur: float = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, Any]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, str]:
        ...
    


class ZoomBlur(ImageOnlyTransform):
    """
    Apply zoom blur transform. See https://arxiv.org/abs/1903.12261.

    Args:
        max_factor ((float, float) or float): range for max factor for blurring.
            If max_factor is a single float, the range will be (1, limit). Default: (1, 1.31).
            All max_factor values should be larger than 1.
        step_factor ((float, float) or float): If single float will be used as step parameter for np.arange.
            If tuple of float step_factor will be in range `[step_factor[0], step_factor[1])`. Default: (0.01, 0.03).
            All step_factor values should be positive.
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image

    Image types:
        Any
    """
    def __init__(self, max_factor: ScaleFloatType = ..., step_factor: ScaleFloatType = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    def apply(self, img: np.ndarray, zoom_factors: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def get_params(self) -> Dict[str, Any]:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, str]:
        ...
    


