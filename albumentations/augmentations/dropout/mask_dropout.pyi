"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Tuple, Union

import numpy as np

from ...core.transforms_interface import DualTransform


__all__ = ["MaskDropout"]
class MaskDropout(DualTransform):
    """
    Image & mask augmentation that zero out mask and image regions corresponding
    to randomly chosen object instance from mask.

    Mask must be single-channel image, zero values treated as background.
    Image can be any number of channels.

    Inspired by https://www.kaggle.com/c/severstal-steel-defect-detection/discussion/114254

    Args:
        max_objects: Maximum number of labels that can be zeroed out. Can be tuple, in this case it's [min, max]
        image_fill_value: Fill value to use when filling image.
            Can be 'inpaint' to apply inpaining (works only  for 3-chahnel images)
        mask_fill_value: Fill value to use when filling mask.

    Targets:
        image, mask

    Image types:
        uint8, float32
    """
    def __init__(self, max_objects: int = ..., image_fill_value: Union[int, float, str] = ..., mask_fill_value: Union[int, float] = ..., always_apply: bool = ..., p: float = ...) -> None:
        ...
    
    @property
    def targets_as_params(self): # -> list[str]:
        ...
    
    def get_params_dependent_on_targets(self, params) -> Dict[str, Any]:
        ...
    
    def apply(self, img: np.ndarray, dropout_mask: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def apply_to_mask(self, img: np.ndarray, dropout_mask: np.ndarray = ..., **params) -> np.ndarray:
        ...
    
    def get_transform_init_args_names(self) -> Tuple[str, ...]:
        ...
    


