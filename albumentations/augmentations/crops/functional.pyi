"""
This type stub file was generated by pyright.
"""

from typing import Optional, Sequence, Tuple

import numpy as np
from albumentations.augmentations.utils import preserve_channel_dim

from ...core.transforms_interface import BoxInternalType, KeypointInternalType

__all__ = ["get_random_crop_coords", "random_crop", "crop_bbox_by_coords", "bbox_random_crop", "crop_keypoint_by_coords", "keypoint_random_crop", "get_center_crop_coords", "center_crop", "bbox_center_crop", "keypoint_center_crop", "crop", "bbox_crop", "clamping_crop", "crop_and_pad", "crop_and_pad_bbox", "crop_and_pad_keypoint"]
def get_random_crop_coords(height: int, width: int, crop_height: int, crop_width: int, h_start: float, w_start: float): # -> tuple[int, int, int, int]:
    ...

def random_crop(img: np.ndarray, crop_height: int, crop_width: int, h_start: float, w_start: float): # -> ndarray[Unknown, Unknown]:
    ...

def crop_bbox_by_coords(bbox: BoxInternalType, crop_coords: Tuple[int, int, int, int], crop_height: int, crop_width: int, rows: int, cols: int): # -> BoxInternalType:
    """Crop a bounding box using the provided coordinates of bottom-left and top-right corners in pixels and the
    required height and width of the crop.

    Args:
        bbox (tuple): A cropped box `(x_min, y_min, x_max, y_max)`.
        crop_coords (tuple): Crop coordinates `(x1, y1, x2, y2)`.
        crop_height (int):
        crop_width (int):
        rows (int): Image rows.
        cols (int): Image cols.

    Returns:
        tuple: A cropped bounding box `(x_min, y_min, x_max, y_max)`.

    """
    ...

def bbox_random_crop(bbox: BoxInternalType, crop_height: int, crop_width: int, h_start: float, w_start: float, rows: int, cols: int): # -> BoxInternalType:
    ...

def crop_keypoint_by_coords(keypoint: KeypointInternalType, crop_coords: Tuple[int, int, int, int]): # -> tuple[float, float, float, float]:
    """Crop a keypoint using the provided coordinates of bottom-left and top-right corners in pixels and the
    required height and width of the crop.

    Args:
        keypoint (tuple): A keypoint `(x, y, angle, scale)`.
        crop_coords (tuple): Crop box coords `(x1, x2, y1, y2)`.

    Returns:
        A keypoint `(x, y, angle, scale)`.

    """
    ...

def keypoint_random_crop(keypoint: KeypointInternalType, crop_height: int, crop_width: int, h_start: float, w_start: float, rows: int, cols: int): # -> tuple[float, float, float, float]:
    """Keypoint random crop.

    Args:
        keypoint: (tuple): A keypoint `(x, y, angle, scale)`.
        crop_height (int): Crop height.
        crop_width (int): Crop width.
        h_start (int): Crop height start.
        w_start (int): Crop width start.
        rows (int): Image height.
        cols (int): Image width.

    Returns:
        A keypoint `(x, y, angle, scale)`.

    """
    ...

def get_center_crop_coords(height: int, width: int, crop_height: int, crop_width: int): # -> tuple[int, int, int, int]:
    ...

def center_crop(img: np.ndarray, crop_height: int, crop_width: int): # -> ndarray[Unknown, Unknown]:
    ...

def bbox_center_crop(bbox: BoxInternalType, crop_height: int, crop_width: int, rows: int, cols: int): # -> BoxInternalType:
    ...

def keypoint_center_crop(keypoint: KeypointInternalType, crop_height: int, crop_width: int, rows: int, cols: int): # -> tuple[float, float, float, float]:
    """Keypoint center crop.

    Args:
        keypoint (tuple): A keypoint `(x, y, angle, scale)`.
        crop_height (int): Crop height.
        crop_width (int): Crop width.
        rows (int): Image height.
        cols (int): Image width.

    Returns:
        tuple: A keypoint `(x, y, angle, scale)`.

    """
    ...

def crop(img: np.ndarray, x_min: int, y_min: int, x_max: int, y_max: int): # -> ndarray[Any, Unknown]:
    ...

def bbox_crop(bbox: BoxInternalType, x_min: int, y_min: int, x_max: int, y_max: int, rows: int, cols: int): # -> BoxInternalType:
    """Crop a bounding box.

    Args:
        bbox (tuple): A bounding box `(x_min, y_min, x_max, y_max)`.
        x_min (int):
        y_min (int):
        x_max (int):
        y_max (int):
        rows (int): Image rows.
        cols (int): Image cols.

    Returns:
        tuple: A cropped bounding box `(x_min, y_min, x_max, y_max)`.

    """
    ...

def clamping_crop(img: np.ndarray, x_min: int, y_min: int, x_max: int, y_max: int): # -> ndarray[Any, Unknown]:
    ...

@preserve_channel_dim
def crop_and_pad(img: np.ndarray, crop_params: Optional[Sequence[int]], pad_params: Optional[Sequence[int]], pad_value: Optional[float], rows: int, cols: int, interpolation: int, pad_mode: int, keep_size: bool) -> np.ndarray:
    ...

def crop_and_pad_bbox(bbox: BoxInternalType, crop_params: Optional[Sequence[int]], pad_params: Optional[Sequence[int]], rows, cols, result_rows, result_cols) -> BoxInternalType:
    ...

def crop_and_pad_keypoint(keypoint: KeypointInternalType, crop_params: Optional[Sequence[int]], pad_params: Optional[Sequence[int]], rows: int, cols: int, result_rows: int, result_cols: int, keep_size: bool) -> KeypointInternalType:
    ...

