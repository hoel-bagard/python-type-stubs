"""
This type stub file was generated by pyright.
"""

from ..augmentations import Perspective
from ..core.transforms_interface import (BasicTransform, DualTransform,
                                         ImageOnlyTransform)

__all__ = ["BasicIAATransform", "DualIAATransform", "ImageOnlyIAATransform", "IAAEmboss", "IAASuperpixels", "IAASharpen", "IAAAdditiveGaussianNoise", "IAACropAndPad", "IAAFliplr", "IAAFlipud", "IAAAffine", "IAAPiecewiseAffine", "IAAPerspective"]
class BasicIAATransform(BasicTransform):
    def __init__(self, always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def update_params(self, params, **kwargs): # -> Dict[str, Any]:
        ...
    
    def apply(self, img, deterministic_processor=..., **params):
        ...
    


class DualIAATransform(DualTransform, BasicIAATransform):
    def apply_to_bboxes(self, bboxes, deterministic_processor=..., rows=..., cols=..., **params): # -> List[BoxType]:
        ...
    
    def apply_to_keypoints(self, keypoints, deterministic_processor=..., rows=..., cols=..., **params): # -> List[Tuple[Unknown, ...]]:
        ...
    


class ImageOnlyIAATransform(ImageOnlyTransform, BasicIAATransform):
    ...


class IAACropAndPad(DualIAATransform):
    """This augmentation is deprecated. Please use CropAndPad instead."""
    def __init__(self, px=..., percent=..., pad_mode=..., pad_cval=..., keep_size=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['px'], Literal['percent'], Literal['pad_mode'], Literal['pad_cval'], Literal['keep_size']]:
        ...
    


class IAAFliplr(DualIAATransform):
    """This augmentation is deprecated. Please use HorizontalFlip instead."""
    def __init__(self, always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[()]:
        ...
    


class IAAFlipud(DualIAATransform):
    """This augmentation is deprecated. Please use VerticalFlip instead."""
    def __init__(self, always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[()]:
        ...
    


class IAAEmboss(ImageOnlyIAATransform):
    """Emboss the input image and overlays the result with the original image.
    This augmentation is deprecated. Please use Emboss instead.

    Args:
        alpha ((float, float)): range to choose the visibility of the embossed image. At 0, only the original image is
            visible,at 1.0 only its embossed version is visible. Default: (0.2, 0.5).
        strength ((float, float)): strength range of the embossing. Default: (0.2, 0.7).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image
    """
    def __init__(self, alpha=..., strength=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['alpha'], Literal['strength']]:
        ...
    


class IAASuperpixels(ImageOnlyIAATransform):
    """Completely or partially transform the input image to its superpixel representation. Uses skimage's version
    of the SLIC algorithm. May be slow.

    This augmentation is deprecated. Please use Superpixels instead.

    Args:
        p_replace (float): defines the probability of any superpixel area being replaced by the superpixel, i.e. by
            the average pixel color within its area. Default: 0.1.
        n_segments (int): target number of superpixels to generate. Default: 100.
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image
    """
    def __init__(self, p_replace=..., n_segments=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['p_replace'], Literal['n_segments']]:
        ...
    


class IAASharpen(ImageOnlyIAATransform):
    """Sharpen the input image and overlays the result with the original image.
    This augmentation is deprecated. Please use Sharpen instead
    Args:
        alpha ((float, float)): range to choose the visibility of the sharpened image. At 0, only the original image is
            visible, at 1.0 only its sharpened version is visible. Default: (0.2, 0.5).
        lightness ((float, float)): range to choose the lightness of the sharpened image. Default: (0.5, 1.0).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image
    """
    def __init__(self, alpha=..., lightness=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['alpha'], Literal['lightness']]:
        ...
    


class IAAAdditiveGaussianNoise(ImageOnlyIAATransform):
    """Add gaussian noise to the input image.

    This augmentation is deprecated. Please use GaussNoise instead.

    Args:
        loc (int): mean of the normal distribution that generates the noise. Default: 0.
        scale ((float, float)): standard deviation of the normal distribution that generates the noise.
            Default: (0.01 * 255, 0.05 * 255).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image
    """
    def __init__(self, loc=..., scale=..., per_channel=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['loc'], Literal['scale'], Literal['per_channel']]:
        ...
    


class IAAPiecewiseAffine(DualIAATransform):
    """Place a regular grid of points on the input and randomly move the neighbourhood of these point around
    via affine transformations.

    This augmentation is deprecated. Please use PiecewiseAffine instead.

    Note: This class introduce interpolation artifacts to mask if it has values other than {0;1}

    Args:
        scale ((float, float): factor range that determines how far each point is moved. Default: (0.03, 0.05).
        nb_rows (int): number of rows of points that the regular grid should have. Default: 4.
        nb_cols (int): number of columns of points that the regular grid should have. Default: 4.
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image, mask
    """
    def __init__(self, scale=..., nb_rows=..., nb_cols=..., order=..., cval=..., mode=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['scale'], Literal['nb_rows'], Literal['nb_cols'], Literal['order'], Literal['cval'], Literal['mode']]:
        ...
    


class IAAAffine(DualIAATransform):
    """Place a regular grid of points on the input and randomly move the neighbourhood of these point around
    via affine transformations.

    This augmentation is deprecated. Please use Affine instead.

    Note: This class introduce interpolation artifacts to mask if it has values other than {0;1}

    Args:
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image, mask
    """
    def __init__(self, scale=..., translate_percent=..., translate_px=..., rotate=..., shear=..., order=..., cval=..., mode=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['scale'], Literal['translate_percent'], Literal['translate_px'], Literal['rotate'], Literal['shear'], Literal['order'], Literal['cval'], Literal['mode']]:
        ...
    


class IAAPerspective(Perspective):
    """Perform a random four point perspective transform of the input.
    This augmentation is deprecated. Please use Perspective instead.

    Note: This class introduce interpolation artifacts to mask if it has values other than {0;1}

    Args:
        scale ((float, float): standard deviation of the normal distributions. These are used to sample
            the random distances of the subimage's corners from the full image's corners. Default: (0.05, 0.1).
        p (float): probability of applying the transform. Default: 0.5.

    Targets:
        image, mask
    """
    def __init__(self, scale=..., keep_size=..., always_apply=..., p=...) -> None:
        ...
    
    @property
    def processor(self):
        ...
    
    def get_transform_init_args_names(self): # -> tuple[Literal['scale'], Literal['keep_size']]:
        ...
    


