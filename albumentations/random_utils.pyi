"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, Sequence, Type, Union

import numpy as np

from .core.transforms_interface import NumType


IntNumType = Union[int, np.ndarray]
Size = Union[int, Sequence[int]]
def get_random_state() -> np.random.RandomState:
    ...

def uniform(low: NumType = ..., high: NumType = ..., size: Optional[Size] = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def rand(d0: NumType, d1: NumType, *more, random_state: Optional[np.random.RandomState] = ..., **kwargs) -> Any:
    ...

def randn(d0: NumType, d1: NumType, *more, random_state: Optional[np.random.RandomState] = ..., **kwargs) -> Any:
    ...

def normal(loc: NumType = ..., scale: NumType = ..., size: Optional[Size] = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def poisson(lam: NumType = ..., size: Optional[Size] = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def permutation(x: Union[int, Sequence[float], np.ndarray], random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def randint(low: IntNumType, high: Optional[IntNumType] = ..., size: Optional[Size] = ..., dtype: Type = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def random(size: Optional[NumType] = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

def choice(a: NumType, size: Optional[Size] = ..., replace: bool = ..., p: Optional[Union[Sequence[float], np.ndarray]] = ..., random_state: Optional[np.random.RandomState] = ...) -> Any:
    ...

